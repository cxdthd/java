package jdbc4.exer;

import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.Scanner;

import org.junit.Test;

import util.JDBCUtils;

//课后练习2
public class Exer2Test {

	// 问题1：向examstudent表中添加一条数据
	/*
	 * Type: IDCard: ExamCard: StudentName: Location: Grade:
	 */
	@Test
	public void testInsert() {
		Scanner scanner = new Scanner(System.in);
		System.out.print("四级/六级：");
		int type = scanner.nextInt();
		System.out.print("身份证号：");
		String IDCard = scanner.next();
		System.out.print("准考证号：");
		String examCard = scanner.next();
		System.out.print("学生姓名：");
		String studentName = scanner.next();
		System.out.print("所在城市：");
		String location = scanner.next();
		System.out.print("考试成绩：");
		int grade = scanner.nextInt();

		String sql = "insert into examstudent(Type,IDCard,ExamCard,StudentName,Location,Grade) values(?,?,?,?,?,?)";
		int update = update(sql, type, IDCard, examCard, studentName, location, grade);
		if (update > 0) {
			System.out.println("添加成功！！！");
		} else {
			System.out.println("添加失败！！！");
		}
	}

	// 通用的增删改操作
	public int update(String sql, Object... args) {// sql中占位符的个数与可变形参的长度一致
		Connection conn = null;
		PreparedStatement ps = null;
		try {
			// 1.获取数据库的连接
			conn = JDBCUtils.getConnection();
			// 2.预编译sql语句，返回PrepareStatement的实例
			ps = conn.prepareStatement(sql);
			// 3.填充占位符
			for (int i = 0; i < args.length; i++) {
				ps.setObject(i + 1, args[i]);// 小心参数声明错误！！
			}
			// 4.执行
			/*
			 * execute() 如果执行的是查询操作，有返回结果，则此方法返回true
			 * 如果执行的是增、删、改操作，没有返回结果，则此方法返回false
			 */
			// ps.execute();

			return ps.executeUpdate();

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			// 5.资源的关闭
			JDBCUtils.closeResource(conn, ps);
		}
		return 0;

	}

	
	
	//问题2：根据身份证号或者准考证号查询学生成绩信息
	@Test
	public void queryWithIDCardOrExamCard(){
		Scanner scanner = new Scanner(System.in);
		System.out.println("请选择您要输入的类型：" + "\n" + "a:准考证号" + "\n" + "b:身份证号" + "\n");
		String selection = scanner.next();
		if(selection.equalsIgnoreCase("a")){
			
		}else if("b".equalsIgnoreCase(selection)){
			
		}else{
			System.out.println("您的输入有误！请重新进入程序");
		}
	}
	
	
	
	
	
	/**
	 * 
	 * @Description 针对于不同的表的通用查询操作，返回表中的一条记录
	 * @author cxdthd
	 * @date 2021年6月22日下午4:22:54
	 * @param clazz
	 * @param sql
	 * @param args
	 * @return
	 */
	public <T> T getInstance(Class<T> clazz, String sql, Object... args) {
		Connection connection = null;
		PreparedStatement ps = null;
		ResultSet resultSet = null;
		try {
			connection = JDBCUtils.getConnection();
			ps = connection.prepareStatement(sql);
			for (int i = 0; i < args.length; i++) {
				ps.setObject(i + 1, args[i]);
			}

			// 执行，获取结果集
			resultSet = ps.executeQuery();
			// 获取结果集的元数据
			ResultSetMetaData rsmd = resultSet.getMetaData();
			// 获取列数
			int columnCount = rsmd.getColumnCount();

			if (resultSet.next()) {
				T t = clazz.newInstance();
				for (int i = 0; i < columnCount; i++) {
					// 获取每个列的列值：通过ResultSet
					Object columnValue = resultSet.getObject(i + 1);
					// 获取每个列的列名：通过ResultSetMetaData
					// 获取列的列名：getColumnName() ---不推荐使用
					// 获取列的别名：getColumnLabel() ---如果没有起别名那就默认列名
					// String columnName = rsmd.getColumnName(i+1);
					// //获取的是order_id
					String columnLabel = rsmd.getColumnLabel(i + 1); // 获取的是orderId

					// 给t对象指定的columnLabel属性，赋值columnValue：通过反射
					Field field = clazz.getDeclaredField(columnLabel);
					field.setAccessible(true);
					field.set(t, columnValue);

				}

				return t;
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			// 资源的关闭
			JDBCUtils.closeResource(connection, ps, resultSet);
		}
		return null;

	}

}
