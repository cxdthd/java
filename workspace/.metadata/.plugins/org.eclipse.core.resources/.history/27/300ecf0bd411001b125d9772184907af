package exer;

/*
 * 算法的考查：数组的复制、反转、查找(线性查找、二分法查找)
 */
public class ArrayTest2 {
	public static void main(String[] args) {
		String[] arr = new String[] { "aa", "bb", "cc", "dd", "ee", "ff", "gg" };

		// 数组的复制
		String[] arr1 = new String[arr.length];
		for (int i = 0; i < arr1.length; i++) {
			arr1[i] = arr[i];
		}
		for (int i = 0; i < arr1.length; i++) {
			System.out.print(arr1[i] + "\t");
		}

		System.out.println();
		// 数组的反转
		// 方式一
		// for (int i = 0; i < arr.length / 2; i++) {
		// String temp = arr[i];
		// arr[i] = arr[arr.length - i - 1];
		// arr[arr.length - i - 1] = temp;
		// }

		// 方式二
		// for (int i = 0, j = arr.length - 1; i < j; i++, j--) {
		// String temp = arr[i];
		// arr[i] = arr[j];
		// arr[j] = temp;
		// }

		// 遍历
		for (int i = 0; i < arr.length; i++) {
			System.out.print(arr[i] + "\t");
		}

		System.out.println();
		// 查找(或搜索)
		// 线性查找
		String dest = "ee";

		boolean isFlag = true;

		for (int i = 0; i < arr.length; i++) {
			if (dest.equals(arr[i])) {
				System.out.println("扎到了指定的元素，位置为：" + i);
				isFlag = false;
				break;
			}
		}
		if (isFlag) {
			System.out.println("很遗憾，没有找到！");
		}

		// 二分法查找
		// 前提：所要查找的数组必须有序
		int[] arr2 = new int[] { -100, -99, -89, -76, -65, -54, -43, -32, -31, -21, -12, -2, 0, 12, 23, 34, 45, 56, 67,
				68 };

	}
}
